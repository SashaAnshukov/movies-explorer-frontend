{"ast":null,"code":"/*!\n * destroy\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar ReadStream = require('fs').ReadStream;\n\nvar Stream = require('stream');\n\nvar Zlib = require('zlib');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = destroy;\n/**\n * Destroy the given stream, and optionally suppress any future `error` events.\n *\n * @param {object} stream\n * @param {boolean} suppress\n * @public\n */\n\nfunction destroy(stream, suppress) {\n  if (isFsReadStream(stream)) {\n    destroyReadStream(stream);\n  } else if (isZlibStream(stream)) {\n    destroyZlibStream(stream);\n  } else if (hasDestroy(stream)) {\n    stream.destroy();\n  }\n\n  if (isEventEmitter(stream) && suppress) {\n    stream.removeAllListeners('error');\n    stream.addListener('error', noop);\n  }\n\n  return stream;\n}\n/**\n * Destroy a ReadStream.\n *\n * @param {object} stream\n * @private\n */\n\n\nfunction destroyReadStream(stream) {\n  stream.destroy();\n\n  if (typeof stream.close === 'function') {\n    // node.js core bug work-around\n    stream.on('open', onOpenClose);\n  }\n}\n/**\n * Close a Zlib stream.\n *\n * Zlib streams below Node.js 4.5.5 have a buggy implementation\n * of .close() when zlib encountered an error.\n *\n * @param {object} stream\n * @private\n */\n\n\nfunction closeZlibStream(stream) {\n  if (stream._hadError === true) {\n    var prop = stream._binding === null ? '_binding' : '_handle';\n    stream[prop] = {\n      close: function () {\n        this[prop] = null;\n      }\n    };\n  }\n\n  stream.close();\n}\n/**\n * Destroy a Zlib stream.\n *\n * Zlib streams don't have a destroy function in Node.js 6. On top of that\n * simply calling destroy on a zlib stream in Node.js 8+ will result in a\n * memory leak. So until that is fixed, we need to call both close AND destroy.\n *\n * PR to fix memory leak: https://github.com/nodejs/node/pull/23734\n *\n * In Node.js 6+8, it's important that destroy is called before close as the\n * stream would otherwise emit the error 'zlib binding closed'.\n *\n * @param {object} stream\n * @private\n */\n\n\nfunction destroyZlibStream(stream) {\n  if (typeof stream.destroy === 'function') {\n    // node.js core bug work-around\n    // istanbul ignore if: node.js 0.8\n    if (stream._binding) {\n      // node.js < 0.10.0\n      stream.destroy();\n\n      if (stream._processing) {\n        stream._needDrain = true;\n        stream.once('drain', onDrainClearBinding);\n      } else {\n        stream._binding.clear();\n      }\n    } else if (stream._destroy && stream._destroy !== Stream.Transform.prototype._destroy) {\n      // node.js >= 12, ^11.1.0, ^10.15.1\n      stream.destroy();\n    } else if (stream._destroy && typeof stream.close === 'function') {\n      // node.js 7, 8\n      stream.destroyed = true;\n      stream.close();\n    } else {\n      // fallback\n      // istanbul ignore next\n      stream.destroy();\n    }\n  } else if (typeof stream.close === 'function') {\n    // node.js < 8 fallback\n    closeZlibStream(stream);\n  }\n}\n/**\n * Determine if stream has destroy.\n * @private\n */\n\n\nfunction hasDestroy(stream) {\n  return stream instanceof Stream && typeof stream.destroy === 'function';\n}\n/**\n * Determine if val is EventEmitter.\n * @private\n */\n\n\nfunction isEventEmitter(val) {\n  return val instanceof EventEmitter;\n}\n/**\n * Determine if stream is fs.ReadStream stream.\n * @private\n */\n\n\nfunction isFsReadStream(stream) {\n  return stream instanceof ReadStream;\n}\n/**\n * Determine if stream is Zlib stream.\n * @private\n */\n\n\nfunction isZlibStream(stream) {\n  return stream instanceof Zlib.Gzip || stream instanceof Zlib.Gunzip || stream instanceof Zlib.Deflate || stream instanceof Zlib.DeflateRaw || stream instanceof Zlib.Inflate || stream instanceof Zlib.InflateRaw || stream instanceof Zlib.Unzip;\n}\n/**\n * No-op function.\n * @private\n */\n\n\nfunction noop() {}\n/**\n * On drain handler to clear binding.\n * @private\n */\n// istanbul ignore next: node.js 0.8\n\n\nfunction onDrainClearBinding() {\n  this._binding.clear();\n}\n/**\n * On open handler to close stream.\n * @private\n */\n\n\nfunction onOpenClose() {\n  if (typeof this.fd === 'number') {\n    // actually close down the fd\n    this.close();\n  }\n}","map":{"version":3,"sources":["C:/dev/diploma/movies-explorer-frontend/node_modules/destroy/index.js"],"names":["EventEmitter","require","ReadStream","Stream","Zlib","module","exports","destroy","stream","suppress","isFsReadStream","destroyReadStream","isZlibStream","destroyZlibStream","hasDestroy","isEventEmitter","removeAllListeners","addListener","noop","close","on","onOpenClose","closeZlibStream","_hadError","prop","_binding","_processing","_needDrain","once","onDrainClearBinding","clear","_destroy","Transform","prototype","destroyed","val","Gzip","Gunzip","Deflate","DeflateRaw","Inflate","InflateRaw","Unzip","fd"],"mappings":"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","sourcesContent":["/*!\n * destroy\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar EventEmitter = require('events').EventEmitter\nvar ReadStream = require('fs').ReadStream\nvar Stream = require('stream')\nvar Zlib = require('zlib')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = destroy\n\n/**\n * Destroy the given stream, and optionally suppress any future `error` events.\n *\n * @param {object} stream\n * @param {boolean} suppress\n * @public\n */\n\nfunction destroy (stream, suppress) {\n  if (isFsReadStream(stream)) {\n    destroyReadStream(stream)\n  } else if (isZlibStream(stream)) {\n    destroyZlibStream(stream)\n  } else if (hasDestroy(stream)) {\n    stream.destroy()\n  }\n\n  if (isEventEmitter(stream) && suppress) {\n    stream.removeAllListeners('error')\n    stream.addListener('error', noop)\n  }\n\n  return stream\n}\n\n/**\n * Destroy a ReadStream.\n *\n * @param {object} stream\n * @private\n */\n\nfunction destroyReadStream (stream) {\n  stream.destroy()\n\n  if (typeof stream.close === 'function') {\n    // node.js core bug work-around\n    stream.on('open', onOpenClose)\n  }\n}\n\n/**\n * Close a Zlib stream.\n *\n * Zlib streams below Node.js 4.5.5 have a buggy implementation\n * of .close() when zlib encountered an error.\n *\n * @param {object} stream\n * @private\n */\n\nfunction closeZlibStream (stream) {\n  if (stream._hadError === true) {\n    var prop = stream._binding === null\n      ? '_binding'\n      : '_handle'\n\n    stream[prop] = {\n      close: function () { this[prop] = null }\n    }\n  }\n\n  stream.close()\n}\n\n/**\n * Destroy a Zlib stream.\n *\n * Zlib streams don't have a destroy function in Node.js 6. On top of that\n * simply calling destroy on a zlib stream in Node.js 8+ will result in a\n * memory leak. So until that is fixed, we need to call both close AND destroy.\n *\n * PR to fix memory leak: https://github.com/nodejs/node/pull/23734\n *\n * In Node.js 6+8, it's important that destroy is called before close as the\n * stream would otherwise emit the error 'zlib binding closed'.\n *\n * @param {object} stream\n * @private\n */\n\nfunction destroyZlibStream (stream) {\n  if (typeof stream.destroy === 'function') {\n    // node.js core bug work-around\n    // istanbul ignore if: node.js 0.8\n    if (stream._binding) {\n      // node.js < 0.10.0\n      stream.destroy()\n      if (stream._processing) {\n        stream._needDrain = true\n        stream.once('drain', onDrainClearBinding)\n      } else {\n        stream._binding.clear()\n      }\n    } else if (stream._destroy && stream._destroy !== Stream.Transform.prototype._destroy) {\n      // node.js >= 12, ^11.1.0, ^10.15.1\n      stream.destroy()\n    } else if (stream._destroy && typeof stream.close === 'function') {\n      // node.js 7, 8\n      stream.destroyed = true\n      stream.close()\n    } else {\n      // fallback\n      // istanbul ignore next\n      stream.destroy()\n    }\n  } else if (typeof stream.close === 'function') {\n    // node.js < 8 fallback\n    closeZlibStream(stream)\n  }\n}\n\n/**\n * Determine if stream has destroy.\n * @private\n */\n\nfunction hasDestroy (stream) {\n  return stream instanceof Stream &&\n    typeof stream.destroy === 'function'\n}\n\n/**\n * Determine if val is EventEmitter.\n * @private\n */\n\nfunction isEventEmitter (val) {\n  return val instanceof EventEmitter\n}\n\n/**\n * Determine if stream is fs.ReadStream stream.\n * @private\n */\n\nfunction isFsReadStream (stream) {\n  return stream instanceof ReadStream\n}\n\n/**\n * Determine if stream is Zlib stream.\n * @private\n */\n\nfunction isZlibStream (stream) {\n  return stream instanceof Zlib.Gzip ||\n    stream instanceof Zlib.Gunzip ||\n    stream instanceof Zlib.Deflate ||\n    stream instanceof Zlib.DeflateRaw ||\n    stream instanceof Zlib.Inflate ||\n    stream instanceof Zlib.InflateRaw ||\n    stream instanceof Zlib.Unzip\n}\n\n/**\n * No-op function.\n * @private\n */\n\nfunction noop () {}\n\n/**\n * On drain handler to clear binding.\n * @private\n */\n\n// istanbul ignore next: node.js 0.8\nfunction onDrainClearBinding () {\n  this._binding.clear()\n}\n\n/**\n * On open handler to close stream.\n * @private\n */\n\nfunction onOpenClose () {\n  if (typeof this.fd === 'number') {\n    // actually close down the fd\n    this.close()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}