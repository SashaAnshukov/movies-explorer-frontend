{"ast":null,"code":"import * as React from 'react';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n/**\n * Parse `children` to `options` if `options` is not provided.\n * Then flatten the `options`.\n */\n\nexport default function useOptions(options, children, fieldNames, optionFilterProp, optionLabelProp) {\n  return React.useMemo(function () {\n    var mergedOptions = options;\n    var childrenAsData = !options;\n\n    if (childrenAsData) {\n      mergedOptions = convertChildrenToData(children);\n    }\n\n    var valueOptions = new Map();\n    var labelOptions = new Map();\n\n    var setLabelOptions = function setLabelOptions(labelOptionsMap, option, key) {\n      if (key && typeof key === 'string') {\n        labelOptionsMap.set(option[key], option);\n      }\n    };\n\n    function dig(optionList) {\n      var isChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // for loop to speed up collection speed\n\n      for (var i = 0; i < optionList.length; i += 1) {\n        var option = optionList[i];\n\n        if (!option[fieldNames.options] || isChildren) {\n          valueOptions.set(option[fieldNames.value], option);\n          setLabelOptions(labelOptions, option, fieldNames.label); // https://github.com/ant-design/ant-design/issues/35304\n\n          setLabelOptions(labelOptions, option, optionFilterProp);\n          setLabelOptions(labelOptions, option, optionLabelProp);\n        } else {\n          dig(option[fieldNames.options], true);\n        }\n      }\n    }\n\n    dig(mergedOptions);\n    return {\n      options: mergedOptions,\n      valueOptions: valueOptions,\n      labelOptions: labelOptions\n    };\n  }, [options, children, fieldNames, optionFilterProp, optionLabelProp]);\n}","map":{"version":3,"sources":["C:/dev/diploma/movies-explorer-frontend/node_modules/rc-select/es/hooks/useOptions.js"],"names":["React","convertChildrenToData","useOptions","options","children","fieldNames","optionFilterProp","optionLabelProp","useMemo","mergedOptions","childrenAsData","valueOptions","Map","labelOptions","setLabelOptions","labelOptionsMap","option","key","set","dig","optionList","isChildren","arguments","length","undefined","i","value","label"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,QAA7B,EAAuCC,UAAvC,EAAmDC,gBAAnD,EAAqEC,eAArE,EAAsF;AACnG,SAAOP,KAAK,CAACQ,OAAN,CAAc,YAAY;AAC/B,QAAIC,aAAa,GAAGN,OAApB;AACA,QAAIO,cAAc,GAAG,CAACP,OAAtB;;AAEA,QAAIO,cAAJ,EAAoB;AAClBD,MAAAA,aAAa,GAAGR,qBAAqB,CAACG,QAAD,CAArC;AACD;;AAED,QAAIO,YAAY,GAAG,IAAIC,GAAJ,EAAnB;AACA,QAAIC,YAAY,GAAG,IAAID,GAAJ,EAAnB;;AAEA,QAAIE,eAAe,GAAG,SAASA,eAAT,CAAyBC,eAAzB,EAA0CC,MAA1C,EAAkDC,GAAlD,EAAuD;AAC3E,UAAIA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAClCF,QAAAA,eAAe,CAACG,GAAhB,CAAoBF,MAAM,CAACC,GAAD,CAA1B,EAAiCD,MAAjC;AACD;AACF,KAJD;;AAMA,aAASG,GAAT,CAAaC,UAAb,EAAyB;AACvB,UAAIC,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAArF,CADuB,CAGvB;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACG,MAA/B,EAAuCE,CAAC,IAAI,CAA5C,EAA+C;AAC7C,YAAIT,MAAM,GAAGI,UAAU,CAACK,CAAD,CAAvB;;AAEA,YAAI,CAACT,MAAM,CAACX,UAAU,CAACF,OAAZ,CAAP,IAA+BkB,UAAnC,EAA+C;AAC7CV,UAAAA,YAAY,CAACO,GAAb,CAAiBF,MAAM,CAACX,UAAU,CAACqB,KAAZ,CAAvB,EAA2CV,MAA3C;AACAF,UAAAA,eAAe,CAACD,YAAD,EAAeG,MAAf,EAAuBX,UAAU,CAACsB,KAAlC,CAAf,CAF6C,CAEY;;AAEzDb,UAAAA,eAAe,CAACD,YAAD,EAAeG,MAAf,EAAuBV,gBAAvB,CAAf;AACAQ,UAAAA,eAAe,CAACD,YAAD,EAAeG,MAAf,EAAuBT,eAAvB,CAAf;AACD,SAND,MAMO;AACLY,UAAAA,GAAG,CAACH,MAAM,CAACX,UAAU,CAACF,OAAZ,CAAP,EAA6B,IAA7B,CAAH;AACD;AACF;AACF;;AAEDgB,IAAAA,GAAG,CAACV,aAAD,CAAH;AACA,WAAO;AACLN,MAAAA,OAAO,EAAEM,aADJ;AAELE,MAAAA,YAAY,EAAEA,YAFT;AAGLE,MAAAA,YAAY,EAAEA;AAHT,KAAP;AAKD,GA1CM,EA0CJ,CAACV,OAAD,EAAUC,QAAV,EAAoBC,UAApB,EAAgCC,gBAAhC,EAAkDC,eAAlD,CA1CI,CAAP;AA2CD","sourcesContent":["import * as React from 'react';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n/**\n * Parse `children` to `options` if `options` is not provided.\n * Then flatten the `options`.\n */\n\nexport default function useOptions(options, children, fieldNames, optionFilterProp, optionLabelProp) {\n  return React.useMemo(function () {\n    var mergedOptions = options;\n    var childrenAsData = !options;\n\n    if (childrenAsData) {\n      mergedOptions = convertChildrenToData(children);\n    }\n\n    var valueOptions = new Map();\n    var labelOptions = new Map();\n\n    var setLabelOptions = function setLabelOptions(labelOptionsMap, option, key) {\n      if (key && typeof key === 'string') {\n        labelOptionsMap.set(option[key], option);\n      }\n    };\n\n    function dig(optionList) {\n      var isChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // for loop to speed up collection speed\n      for (var i = 0; i < optionList.length; i += 1) {\n        var option = optionList[i];\n\n        if (!option[fieldNames.options] || isChildren) {\n          valueOptions.set(option[fieldNames.value], option);\n          setLabelOptions(labelOptions, option, fieldNames.label); // https://github.com/ant-design/ant-design/issues/35304\n\n          setLabelOptions(labelOptions, option, optionFilterProp);\n          setLabelOptions(labelOptions, option, optionLabelProp);\n        } else {\n          dig(option[fieldNames.options], true);\n        }\n      }\n    }\n\n    dig(mergedOptions);\n    return {\n      options: mergedOptions,\n      valueOptions: valueOptions,\n      labelOptions: labelOptions\n    };\n  }, [options, children, fieldNames, optionFilterProp, optionLabelProp]);\n}"]},"metadata":{},"sourceType":"module"}