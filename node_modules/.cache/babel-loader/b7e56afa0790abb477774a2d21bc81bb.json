{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"id\", \"prefixCls\", \"fieldNames\", \"defaultValue\", \"value\", \"changeOnSelect\", \"onChange\", \"displayRender\", \"checkable\", \"searchValue\", \"onSearch\", \"showSearch\", \"expandTrigger\", \"options\", \"dropdownPrefixCls\", \"loadData\", \"popupVisible\", \"open\", \"popupClassName\", \"dropdownClassName\", \"dropdownMenuColumnStyle\", \"popupPlacement\", \"placement\", \"onDropdownVisibleChange\", \"onPopupVisibleChange\", \"expandIcon\", \"loadingIcon\", \"children\", \"dropdownMatchSelectWidth\", \"showCheckedStrategy\"];\nimport * as React from 'react';\nimport useId from \"rc-select/es/hooks/useId\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { BaseSelect } from 'rc-select';\nimport OptionList from './OptionList';\nimport CascaderContext from './context';\nimport { fillFieldNames, toPathKey, toPathKeys, SHOW_PARENT, SHOW_CHILD } from './utils/commonUtil';\nimport useDisplayValues from './hooks/useDisplayValues';\nimport useRefFunc from './hooks/useRefFunc';\nimport useEntities from './hooks/useEntities';\nimport { formatStrategyValues, toPathOptions } from './utils/treeUtil';\nimport useSearchConfig from './hooks/useSearchConfig';\nimport useSearchOptions from './hooks/useSearchOptions';\nimport warning from \"rc-util/es/warning\";\nimport useMissingValues from './hooks/useMissingValues';\n\nfunction isMultipleValue(value) {\n  return Array.isArray(value) && Array.isArray(value[0]);\n}\n\nfunction toRawValues(value) {\n  if (!value) {\n    return [];\n  }\n\n  if (isMultipleValue(value)) {\n    return value;\n  }\n\n  return (value.length === 0 ? [] : [value]).map(function (val) {\n    return Array.isArray(val) ? val : [val];\n  });\n}\n\nvar Cascader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-cascader' : _props$prefixCls,\n      fieldNames = props.fieldNames,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      changeOnSelect = props.changeOnSelect,\n      onChange = props.onChange,\n      displayRender = props.displayRender,\n      checkable = props.checkable,\n      searchValue = props.searchValue,\n      onSearch = props.onSearch,\n      showSearch = props.showSearch,\n      expandTrigger = props.expandTrigger,\n      options = props.options,\n      dropdownPrefixCls = props.dropdownPrefixCls,\n      loadData = props.loadData,\n      popupVisible = props.popupVisible,\n      open = props.open,\n      popupClassName = props.popupClassName,\n      dropdownClassName = props.dropdownClassName,\n      dropdownMenuColumnStyle = props.dropdownMenuColumnStyle,\n      popupPlacement = props.popupPlacement,\n      placement = props.placement,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onPopupVisibleChange = props.onPopupVisibleChange,\n      _props$expandIcon = props.expandIcon,\n      expandIcon = _props$expandIcon === void 0 ? '>' : _props$expandIcon,\n      loadingIcon = props.loadingIcon,\n      children = props.children,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? false : _props$dropdownMatchS,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_PARENT : _props$showCheckedStr,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var multiple = !!checkable; // =========================== Values ===========================\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value,\n    postState: toRawValues\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      rawValues = _useMergedState2[0],\n      setRawValues = _useMergedState2[1]; // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]); // =========================== Option ===========================\n\n  var mergedOptions = React.useMemo(function () {\n    return options || [];\n  }, [options]); // Only used in multiple mode, this fn will not call in single mode\n\n  var getPathKeyEntities = useEntities(mergedOptions, mergedFieldNames);\n  /** Convert path key back to value format */\n\n  var getValueByKeyPath = React.useCallback(function (pathKeys) {\n    var keyPathEntities = getPathKeyEntities();\n    return pathKeys.map(function (pathKey) {\n      var nodes = keyPathEntities[pathKey].nodes;\n      return nodes.map(function (node) {\n        return node[mergedFieldNames.value];\n      });\n    });\n  }, [getPathKeyEntities, mergedFieldNames]); // =========================== Search ===========================\n\n  var _useMergedState3 = useMergedState('', {\n    value: searchValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedSearchValue = _useMergedState4[0],\n      setSearchValue = _useMergedState4[1];\n\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n\n    if (info.source !== 'blur' && onSearch) {\n      onSearch(searchText);\n    }\n  };\n\n  var _useSearchConfig = useSearchConfig(showSearch),\n      _useSearchConfig2 = _slicedToArray(_useSearchConfig, 2),\n      mergedShowSearch = _useSearchConfig2[0],\n      searchConfig = _useSearchConfig2[1];\n\n  var searchOptions = useSearchOptions(mergedSearchValue, mergedOptions, mergedFieldNames, dropdownPrefixCls || prefixCls, searchConfig, changeOnSelect); // =========================== Values ===========================\n\n  var getMissingValues = useMissingValues(mergedOptions, mergedFieldNames); // Fill `rawValues` with checked conduction values\n\n  var _React$useMemo = React.useMemo(function () {\n    var _getMissingValues = getMissingValues(rawValues),\n        _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\n        existValues = _getMissingValues2[0],\n        missingValues = _getMissingValues2[1];\n\n    if (!multiple || !rawValues.length) {\n      return [existValues, [], missingValues];\n    }\n\n    var keyPathValues = toPathKeys(existValues);\n    var keyPathEntities = getPathKeyEntities();\n\n    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys; // Convert key back to value cells\n    // Convert key back to value cells\n\n\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n      checkedValues = _React$useMemo2[0],\n      halfCheckedValues = _React$useMemo2[1],\n      missingCheckedValues = _React$useMemo2[2];\n\n  var deDuplicatedValues = React.useMemo(function () {\n    var checkedKeys = toPathKeys(checkedValues);\n    var deduplicateKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n    return [].concat(_toConsumableArray(missingCheckedValues), _toConsumableArray(getValueByKeyPath(deduplicateKeys)));\n  }, [checkedValues, getPathKeyEntities, getValueByKeyPath, missingCheckedValues, showCheckedStrategy]);\n  var displayValues = useDisplayValues(deDuplicatedValues, mergedOptions, mergedFieldNames, multiple, displayRender); // =========================== Change ===========================\n\n  var triggerChange = useRefFunc(function (nextValues) {\n    setRawValues(nextValues); // Save perf if no need trigger event\n\n    if (onChange) {\n      var nextRawValues = toRawValues(nextValues);\n      var valueOptions = nextRawValues.map(function (valueCells) {\n        return toPathOptions(valueCells, mergedOptions, mergedFieldNames).map(function (valueOpt) {\n          return valueOpt.option;\n        });\n      });\n      var triggerValues = multiple ? nextRawValues : nextRawValues[0];\n      var triggerOptions = multiple ? valueOptions : valueOptions[0];\n      onChange(triggerValues, triggerOptions);\n    }\n  }); // =========================== Select ===========================\n\n  var onInternalSelect = useRefFunc(function (valuePath) {\n    setSearchValue('');\n\n    if (!multiple) {\n      triggerChange(valuePath);\n    } else {\n      // Prepare conduct required info\n      var pathKey = toPathKey(valuePath);\n      var checkedPathKeys = toPathKeys(checkedValues);\n      var halfCheckedPathKeys = toPathKeys(halfCheckedValues);\n      var existInChecked = checkedPathKeys.includes(pathKey);\n      var existInMissing = missingCheckedValues.some(function (valueCells) {\n        return toPathKey(valueCells) === pathKey;\n      }); // Do update\n\n      var nextCheckedValues = checkedValues;\n      var nextMissingValues = missingCheckedValues;\n\n      if (existInMissing && !existInChecked) {\n        // Missing value only do filter\n        nextMissingValues = missingCheckedValues.filter(function (valueCells) {\n          return toPathKey(valueCells) !== pathKey;\n        });\n      } else {\n        // Update checked key first\n        var nextRawCheckedKeys = existInChecked ? checkedPathKeys.filter(function (key) {\n          return key !== pathKey;\n        }) : [].concat(_toConsumableArray(checkedPathKeys), [pathKey]);\n        var pathKeyEntities = getPathKeyEntities(); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (existInChecked) {\n          var _conductCheck2 = conductCheck(nextRawCheckedKeys, {\n            checked: false,\n            halfCheckedKeys: halfCheckedPathKeys\n          }, pathKeyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } else {\n          var _conductCheck3 = conductCheck(nextRawCheckedKeys, true, pathKeyEntities);\n\n          checkedKeys = _conductCheck3.checkedKeys;\n        } // Roll up to parent level keys\n\n\n        var deDuplicatedKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n        nextCheckedValues = getValueByKeyPath(deDuplicatedKeys);\n      }\n\n      triggerChange([].concat(_toConsumableArray(nextMissingValues), _toConsumableArray(nextCheckedValues)));\n    }\n  }); // Display Value change logic\n\n  var onDisplayValuesChange = function onDisplayValuesChange(_, info) {\n    if (info.type === 'clear') {\n      triggerChange([]);\n      return;\n    } // Cascader do not support `add` type. Only support `remove`\n\n\n    var valueCells = info.values[0].valueCells;\n    onInternalSelect(valueCells);\n  }; // ============================ Open ============================\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(!onPopupVisibleChange, '`onPopupVisibleChange` is deprecated. Please use `onDropdownVisibleChange` instead.');\n    warning(popupVisible === undefined, '`popupVisible` is deprecated. Please use `open` instead.');\n    warning(popupClassName === undefined, '`popupClassName` is deprecated. Please use `dropdownClassName` instead.');\n    warning(popupPlacement === undefined, '`popupPlacement` is deprecated. Please use `placement` instead.');\n  }\n\n  var mergedOpen = open !== undefined ? open : popupVisible;\n  var mergedDropdownClassName = dropdownClassName || popupClassName;\n  var mergedPlacement = placement || popupPlacement;\n\n  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(nextVisible) {\n    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextVisible);\n    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextVisible);\n  }; // ========================== Context ===========================\n\n\n  var cascaderContext = React.useMemo(function () {\n    return {\n      options: mergedOptions,\n      fieldNames: mergedFieldNames,\n      values: checkedValues,\n      halfValues: halfCheckedValues,\n      changeOnSelect: changeOnSelect,\n      onSelect: onInternalSelect,\n      checkable: checkable,\n      searchOptions: searchOptions,\n      dropdownPrefixCls: dropdownPrefixCls,\n      loadData: loadData,\n      expandTrigger: expandTrigger,\n      expandIcon: expandIcon,\n      loadingIcon: loadingIcon,\n      dropdownMenuColumnStyle: dropdownMenuColumnStyle\n    };\n  }, [mergedOptions, mergedFieldNames, checkedValues, halfCheckedValues, changeOnSelect, onInternalSelect, checkable, searchOptions, dropdownPrefixCls, loadData, expandTrigger, expandIcon, loadingIcon, dropdownMenuColumnStyle]); // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n\n  var emptyOptions = !(mergedSearchValue ? searchOptions : mergedOptions).length;\n  var dropdownStyle = // Search to match width\n  mergedSearchValue && searchConfig.matchInputWidth || // Empty keep the width\n  emptyOptions ? {} : {\n    minWidth: 'auto'\n  };\n  return /*#__PURE__*/React.createElement(CascaderContext.Provider, {\n    value: cascaderContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({}, restProps, {\n    // MISC\n    ref: ref,\n    id: mergedId,\n    prefixCls: prefixCls,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n    dropdownStyle: dropdownStyle // Value\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange,\n    mode: multiple ? 'multiple' : undefined // Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    showSearch: mergedShowSearch // Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: emptyOptions // Open\n    ,\n    open: mergedOpen,\n    dropdownClassName: mergedDropdownClassName,\n    placement: mergedPlacement,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange // Children\n    ,\n    getRawInputElement: function getRawInputElement() {\n      return children;\n    }\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Cascader.displayName = 'Cascader';\n}\n\nCascader.SHOW_PARENT = SHOW_PARENT;\nCascader.SHOW_CHILD = SHOW_CHILD;\nexport default Cascader;","map":{"version":3,"sources":["C:/dev/diploma/movies-explorer-frontend/node_modules/rc-cascader/es/Cascader.js"],"names":["_extends","_toConsumableArray","_slicedToArray","_objectWithoutProperties","_excluded","React","useId","conductCheck","useMergedState","BaseSelect","OptionList","CascaderContext","fillFieldNames","toPathKey","toPathKeys","SHOW_PARENT","SHOW_CHILD","useDisplayValues","useRefFunc","useEntities","formatStrategyValues","toPathOptions","useSearchConfig","useSearchOptions","warning","useMissingValues","isMultipleValue","value","Array","isArray","toRawValues","length","map","val","Cascader","forwardRef","props","ref","id","_props$prefixCls","prefixCls","fieldNames","defaultValue","changeOnSelect","onChange","displayRender","checkable","searchValue","onSearch","showSearch","expandTrigger","options","dropdownPrefixCls","loadData","popupVisible","open","popupClassName","dropdownClassName","dropdownMenuColumnStyle","popupPlacement","placement","onDropdownVisibleChange","onPopupVisibleChange","_props$expandIcon","expandIcon","loadingIcon","children","_props$dropdownMatchS","dropdownMatchSelectWidth","_props$showCheckedStr","showCheckedStrategy","restProps","mergedId","multiple","_useMergedState","postState","_useMergedState2","rawValues","setRawValues","mergedFieldNames","useMemo","JSON","stringify","mergedOptions","getPathKeyEntities","getValueByKeyPath","useCallback","pathKeys","keyPathEntities","pathKey","nodes","node","_useMergedState3","search","_useMergedState4","mergedSearchValue","setSearchValue","onInternalSearch","searchText","info","source","_useSearchConfig","_useSearchConfig2","mergedShowSearch","searchConfig","searchOptions","getMissingValues","_React$useMemo","_getMissingValues","_getMissingValues2","existValues","missingValues","keyPathValues","_conductCheck","checkedKeys","halfCheckedKeys","_React$useMemo2","checkedValues","halfCheckedValues","missingCheckedValues","deDuplicatedValues","deduplicateKeys","concat","displayValues","triggerChange","nextValues","nextRawValues","valueOptions","valueCells","valueOpt","option","triggerValues","triggerOptions","onInternalSelect","valuePath","checkedPathKeys","halfCheckedPathKeys","existInChecked","includes","existInMissing","some","nextCheckedValues","nextMissingValues","filter","nextRawCheckedKeys","key","pathKeyEntities","_conductCheck2","checked","_conductCheck3","deDuplicatedKeys","onDisplayValuesChange","_","type","values","process","env","NODE_ENV","undefined","mergedOpen","mergedDropdownClassName","mergedPlacement","onInternalDropdownVisibleChange","nextVisible","cascaderContext","halfValues","onSelect","emptyOptions","dropdownStyle","matchInputWidth","minWidth","createElement","Provider","mode","getRawInputElement","displayName"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAOC,wBAAP,MAAqC,oDAArC;AACA,IAAIC,SAAS,GAAG,CAAC,IAAD,EAAO,WAAP,EAAoB,YAApB,EAAkC,cAAlC,EAAkD,OAAlD,EAA2D,gBAA3D,EAA6E,UAA7E,EAAyF,eAAzF,EAA0G,WAA1G,EAAuH,aAAvH,EAAsI,UAAtI,EAAkJ,YAAlJ,EAAgK,eAAhK,EAAiL,SAAjL,EAA4L,mBAA5L,EAAiN,UAAjN,EAA6N,cAA7N,EAA6O,MAA7O,EAAqP,gBAArP,EAAuQ,mBAAvQ,EAA4R,yBAA5R,EAAuT,gBAAvT,EAAyU,WAAzU,EAAsV,yBAAtV,EAAiX,sBAAjX,EAAyY,YAAzY,EAAuZ,aAAvZ,EAAsa,UAAta,EAAkb,0BAAlb,EAA8c,qBAA9c,CAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,UAApC,EAAgDC,WAAhD,EAA6DC,UAA7D,QAA+E,oBAA/E;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,kBAApD;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwBC,KAAK,CAACC,OAAN,CAAcF,KAAK,CAAC,CAAD,CAAnB,CAA/B;AACD;;AAED,SAASG,WAAT,CAAqBH,KAArB,EAA4B;AAC1B,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AAED,MAAID,eAAe,CAACC,KAAD,CAAnB,EAA4B;AAC1B,WAAOA,KAAP;AACD;;AAED,SAAO,CAACA,KAAK,CAACI,MAAN,KAAiB,CAAjB,GAAqB,EAArB,GAA0B,CAACJ,KAAD,CAA3B,EAAoCK,GAApC,CAAwC,UAAUC,GAAV,EAAe;AAC5D,WAAOL,KAAK,CAACC,OAAN,CAAcI,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAAlC;AACD,GAFM,CAAP;AAGD;;AAED,IAAIC,QAAQ,GAAG,aAAa7B,KAAK,CAAC8B,UAAN,CAAiB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACjE,MAAIC,EAAE,GAAGF,KAAK,CAACE,EAAf;AAAA,MACIC,gBAAgB,GAAGH,KAAK,CAACI,SAD7B;AAAA,MAEIA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,aAA9B,GAA8CA,gBAF9D;AAAA,MAGIE,UAAU,GAAGL,KAAK,CAACK,UAHvB;AAAA,MAIIC,YAAY,GAAGN,KAAK,CAACM,YAJzB;AAAA,MAKIf,KAAK,GAAGS,KAAK,CAACT,KALlB;AAAA,MAMIgB,cAAc,GAAGP,KAAK,CAACO,cAN3B;AAAA,MAOIC,QAAQ,GAAGR,KAAK,CAACQ,QAPrB;AAAA,MAQIC,aAAa,GAAGT,KAAK,CAACS,aAR1B;AAAA,MASIC,SAAS,GAAGV,KAAK,CAACU,SATtB;AAAA,MAUIC,WAAW,GAAGX,KAAK,CAACW,WAVxB;AAAA,MAWIC,QAAQ,GAAGZ,KAAK,CAACY,QAXrB;AAAA,MAYIC,UAAU,GAAGb,KAAK,CAACa,UAZvB;AAAA,MAaIC,aAAa,GAAGd,KAAK,CAACc,aAb1B;AAAA,MAcIC,OAAO,GAAGf,KAAK,CAACe,OAdpB;AAAA,MAeIC,iBAAiB,GAAGhB,KAAK,CAACgB,iBAf9B;AAAA,MAgBIC,QAAQ,GAAGjB,KAAK,CAACiB,QAhBrB;AAAA,MAiBIC,YAAY,GAAGlB,KAAK,CAACkB,YAjBzB;AAAA,MAkBIC,IAAI,GAAGnB,KAAK,CAACmB,IAlBjB;AAAA,MAmBIC,cAAc,GAAGpB,KAAK,CAACoB,cAnB3B;AAAA,MAoBIC,iBAAiB,GAAGrB,KAAK,CAACqB,iBApB9B;AAAA,MAqBIC,uBAAuB,GAAGtB,KAAK,CAACsB,uBArBpC;AAAA,MAsBIC,cAAc,GAAGvB,KAAK,CAACuB,cAtB3B;AAAA,MAuBIC,SAAS,GAAGxB,KAAK,CAACwB,SAvBtB;AAAA,MAwBIC,uBAAuB,GAAGzB,KAAK,CAACyB,uBAxBpC;AAAA,MAyBIC,oBAAoB,GAAG1B,KAAK,CAAC0B,oBAzBjC;AAAA,MA0BIC,iBAAiB,GAAG3B,KAAK,CAAC4B,UA1B9B;AAAA,MA2BIA,UAAU,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,GAA/B,GAAqCA,iBA3BtD;AAAA,MA4BIE,WAAW,GAAG7B,KAAK,CAAC6B,WA5BxB;AAAA,MA6BIC,QAAQ,GAAG9B,KAAK,CAAC8B,QA7BrB;AAAA,MA8BIC,qBAAqB,GAAG/B,KAAK,CAACgC,wBA9BlC;AAAA,MA+BIA,wBAAwB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBA/B1E;AAAA,MAgCIE,qBAAqB,GAAGjC,KAAK,CAACkC,mBAhClC;AAAA,MAiCIA,mBAAmB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmCtD,WAAnC,GAAiDsD,qBAjC3E;AAAA,MAkCIE,SAAS,GAAGpE,wBAAwB,CAACiC,KAAD,EAAQhC,SAAR,CAlCxC;;AAoCA,MAAIoE,QAAQ,GAAGlE,KAAK,CAACgC,EAAD,CAApB;AACA,MAAImC,QAAQ,GAAG,CAAC,CAAC3B,SAAjB,CAtCiE,CAsCrC;;AAE5B,MAAI4B,eAAe,GAAGlE,cAAc,CAACkC,YAAD,EAAe;AACjDf,IAAAA,KAAK,EAAEA,KAD0C;AAEjDgD,IAAAA,SAAS,EAAE7C;AAFsC,GAAf,CAApC;AAAA,MAII8C,gBAAgB,GAAG1E,cAAc,CAACwE,eAAD,EAAkB,CAAlB,CAJrC;AAAA,MAKIG,SAAS,GAAGD,gBAAgB,CAAC,CAAD,CALhC;AAAA,MAMIE,YAAY,GAAGF,gBAAgB,CAAC,CAAD,CANnC,CAxCiE,CA8CzB;;;AAGxC,MAAIG,gBAAgB,GAAG1E,KAAK,CAAC2E,OAAN,CAAc,YAAY;AAC/C,WAAOpE,cAAc,CAAC6B,UAAD,CAArB;AACD,GAFsB;AAGvB;AACA,GAACwC,IAAI,CAACC,SAAL,CAAezC,UAAf,CAAD,CAJuB,CAAvB,CAjDiE,CAqDlC;;AAE/B,MAAI0C,aAAa,GAAG9E,KAAK,CAAC2E,OAAN,CAAc,YAAY;AAC5C,WAAO7B,OAAO,IAAI,EAAlB;AACD,GAFmB,EAEjB,CAACA,OAAD,CAFiB,CAApB,CAvDiE,CAyDlD;;AAEf,MAAIiC,kBAAkB,GAAGjE,WAAW,CAACgE,aAAD,EAAgBJ,gBAAhB,CAApC;AACA;;AAEA,MAAIM,iBAAiB,GAAGhF,KAAK,CAACiF,WAAN,CAAkB,UAAUC,QAAV,EAAoB;AAC5D,QAAIC,eAAe,GAAGJ,kBAAkB,EAAxC;AACA,WAAOG,QAAQ,CAACvD,GAAT,CAAa,UAAUyD,OAAV,EAAmB;AACrC,UAAIC,KAAK,GAAGF,eAAe,CAACC,OAAD,CAAf,CAAyBC,KAArC;AACA,aAAOA,KAAK,CAAC1D,GAAN,CAAU,UAAU2D,IAAV,EAAgB;AAC/B,eAAOA,IAAI,CAACZ,gBAAgB,CAACpD,KAAlB,CAAX;AACD,OAFM,CAAP;AAGD,KALM,CAAP;AAMD,GARuB,EAQrB,CAACyD,kBAAD,EAAqBL,gBAArB,CARqB,CAAxB,CA9DiE,CAsErB;;AAE5C,MAAIa,gBAAgB,GAAGpF,cAAc,CAAC,EAAD,EAAK;AACxCmB,IAAAA,KAAK,EAAEoB,WADiC;AAExC4B,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBkB,MAAnB,EAA2B;AACpC,aAAOA,MAAM,IAAI,EAAjB;AACD;AAJuC,GAAL,CAArC;AAAA,MAMIC,gBAAgB,GAAG5F,cAAc,CAAC0F,gBAAD,EAAmB,CAAnB,CANrC;AAAA,MAOIG,iBAAiB,GAAGD,gBAAgB,CAAC,CAAD,CAPxC;AAAA,MAQIE,cAAc,GAAGF,gBAAgB,CAAC,CAAD,CARrC;;AAUA,MAAIG,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,UAA1B,EAAsCC,IAAtC,EAA4C;AACjEH,IAAAA,cAAc,CAACE,UAAD,CAAd;;AAEA,QAAIC,IAAI,CAACC,MAAL,KAAgB,MAAhB,IAA0BpD,QAA9B,EAAwC;AACtCA,MAAAA,QAAQ,CAACkD,UAAD,CAAR;AACD;AACF,GAND;;AAQA,MAAIG,gBAAgB,GAAG/E,eAAe,CAAC2B,UAAD,CAAtC;AAAA,MACIqD,iBAAiB,GAAGpG,cAAc,CAACmG,gBAAD,EAAmB,CAAnB,CADtC;AAAA,MAEIE,gBAAgB,GAAGD,iBAAiB,CAAC,CAAD,CAFxC;AAAA,MAGIE,YAAY,GAAGF,iBAAiB,CAAC,CAAD,CAHpC;;AAKA,MAAIG,aAAa,GAAGlF,gBAAgB,CAACwE,iBAAD,EAAoBZ,aAApB,EAAmCJ,gBAAnC,EAAqD3B,iBAAiB,IAAIZ,SAA1E,EAAqFgE,YAArF,EAAmG7D,cAAnG,CAApC,CA/FiE,CA+FuF;;AAExJ,MAAI+D,gBAAgB,GAAGjF,gBAAgB,CAAC0D,aAAD,EAAgBJ,gBAAhB,CAAvC,CAjGiE,CAiGS;;AAE1E,MAAI4B,cAAc,GAAGtG,KAAK,CAAC2E,OAAN,CAAc,YAAY;AAC7C,QAAI4B,iBAAiB,GAAGF,gBAAgB,CAAC7B,SAAD,CAAxC;AAAA,QACIgC,kBAAkB,GAAG3G,cAAc,CAAC0G,iBAAD,EAAoB,CAApB,CADvC;AAAA,QAEIE,WAAW,GAAGD,kBAAkB,CAAC,CAAD,CAFpC;AAAA,QAGIE,aAAa,GAAGF,kBAAkB,CAAC,CAAD,CAHtC;;AAKA,QAAI,CAACpC,QAAD,IAAa,CAACI,SAAS,CAAC9C,MAA5B,EAAoC;AAClC,aAAO,CAAC+E,WAAD,EAAc,EAAd,EAAkBC,aAAlB,CAAP;AACD;;AAED,QAAIC,aAAa,GAAGlG,UAAU,CAACgG,WAAD,CAA9B;AACA,QAAItB,eAAe,GAAGJ,kBAAkB,EAAxC;;AAEA,QAAI6B,aAAa,GAAG1G,YAAY,CAACyG,aAAD,EAAgB,IAAhB,EAAsBxB,eAAtB,CAAhC;AAAA,QACI0B,WAAW,GAAGD,aAAa,CAACC,WADhC;AAAA,QAEIC,eAAe,GAAGF,aAAa,CAACE,eAFpC,CAb6C,CAeQ;AAGrD;;;AACA,WAAO,CAAC9B,iBAAiB,CAAC6B,WAAD,CAAlB,EAAiC7B,iBAAiB,CAAC8B,eAAD,CAAlD,EAAqEJ,aAArE,CAAP;AACD,GApBoB,EAoBlB,CAACtC,QAAD,EAAWI,SAAX,EAAsBO,kBAAtB,EAA0CC,iBAA1C,EAA6DqB,gBAA7D,CApBkB,CAArB;AAAA,MAqBIU,eAAe,GAAGlH,cAAc,CAACyG,cAAD,EAAiB,CAAjB,CArBpC;AAAA,MAsBIU,aAAa,GAAGD,eAAe,CAAC,CAAD,CAtBnC;AAAA,MAuBIE,iBAAiB,GAAGF,eAAe,CAAC,CAAD,CAvBvC;AAAA,MAwBIG,oBAAoB,GAAGH,eAAe,CAAC,CAAD,CAxB1C;;AA0BA,MAAII,kBAAkB,GAAGnH,KAAK,CAAC2E,OAAN,CAAc,YAAY;AACjD,QAAIkC,WAAW,GAAGpG,UAAU,CAACuG,aAAD,CAA5B;AACA,QAAII,eAAe,GAAGrG,oBAAoB,CAAC8F,WAAD,EAAc9B,kBAAd,EAAkCd,mBAAlC,CAA1C;AACA,WAAO,GAAGoD,MAAH,CAAUzH,kBAAkB,CAACsH,oBAAD,CAA5B,EAAoDtH,kBAAkB,CAACoF,iBAAiB,CAACoC,eAAD,CAAlB,CAAtE,CAAP;AACD,GAJwB,EAItB,CAACJ,aAAD,EAAgBjC,kBAAhB,EAAoCC,iBAApC,EAAuDkC,oBAAvD,EAA6EjD,mBAA7E,CAJsB,CAAzB;AAKA,MAAIqD,aAAa,GAAG1G,gBAAgB,CAACuG,kBAAD,EAAqBrC,aAArB,EAAoCJ,gBAApC,EAAsDN,QAAtD,EAAgE5B,aAAhE,CAApC,CAlIiE,CAkImD;;AAEpH,MAAI+E,aAAa,GAAG1G,UAAU,CAAC,UAAU2G,UAAV,EAAsB;AACnD/C,IAAAA,YAAY,CAAC+C,UAAD,CAAZ,CADmD,CACzB;;AAE1B,QAAIjF,QAAJ,EAAc;AACZ,UAAIkF,aAAa,GAAGhG,WAAW,CAAC+F,UAAD,CAA/B;AACA,UAAIE,YAAY,GAAGD,aAAa,CAAC9F,GAAd,CAAkB,UAAUgG,UAAV,EAAsB;AACzD,eAAO3G,aAAa,CAAC2G,UAAD,EAAa7C,aAAb,EAA4BJ,gBAA5B,CAAb,CAA2D/C,GAA3D,CAA+D,UAAUiG,QAAV,EAAoB;AACxF,iBAAOA,QAAQ,CAACC,MAAhB;AACD,SAFM,CAAP;AAGD,OAJkB,CAAnB;AAKA,UAAIC,aAAa,GAAG1D,QAAQ,GAAGqD,aAAH,GAAmBA,aAAa,CAAC,CAAD,CAA5D;AACA,UAAIM,cAAc,GAAG3D,QAAQ,GAAGsD,YAAH,GAAkBA,YAAY,CAAC,CAAD,CAA3D;AACAnF,MAAAA,QAAQ,CAACuF,aAAD,EAAgBC,cAAhB,CAAR;AACD;AACF,GAd6B,CAA9B,CApIiE,CAkJ7D;;AAEJ,MAAIC,gBAAgB,GAAGnH,UAAU,CAAC,UAAUoH,SAAV,EAAqB;AACrDtC,IAAAA,cAAc,CAAC,EAAD,CAAd;;AAEA,QAAI,CAACvB,QAAL,EAAe;AACbmD,MAAAA,aAAa,CAACU,SAAD,CAAb;AACD,KAFD,MAEO;AACL;AACA,UAAI7C,OAAO,GAAG5E,SAAS,CAACyH,SAAD,CAAvB;AACA,UAAIC,eAAe,GAAGzH,UAAU,CAACuG,aAAD,CAAhC;AACA,UAAImB,mBAAmB,GAAG1H,UAAU,CAACwG,iBAAD,CAApC;AACA,UAAImB,cAAc,GAAGF,eAAe,CAACG,QAAhB,CAAyBjD,OAAzB,CAArB;AACA,UAAIkD,cAAc,GAAGpB,oBAAoB,CAACqB,IAArB,CAA0B,UAAUZ,UAAV,EAAsB;AACnE,eAAOnH,SAAS,CAACmH,UAAD,CAAT,KAA0BvC,OAAjC;AACD,OAFoB,CAArB,CANK,CAQD;;AAEJ,UAAIoD,iBAAiB,GAAGxB,aAAxB;AACA,UAAIyB,iBAAiB,GAAGvB,oBAAxB;;AAEA,UAAIoB,cAAc,IAAI,CAACF,cAAvB,EAAuC;AACrC;AACAK,QAAAA,iBAAiB,GAAGvB,oBAAoB,CAACwB,MAArB,CAA4B,UAAUf,UAAV,EAAsB;AACpE,iBAAOnH,SAAS,CAACmH,UAAD,CAAT,KAA0BvC,OAAjC;AACD,SAFmB,CAApB;AAGD,OALD,MAKO;AACL;AACA,YAAIuD,kBAAkB,GAAGP,cAAc,GAAGF,eAAe,CAACQ,MAAhB,CAAuB,UAAUE,GAAV,EAAe;AAC9E,iBAAOA,GAAG,KAAKxD,OAAf;AACD,SAFyC,CAAH,GAElC,GAAGiC,MAAH,CAAUzH,kBAAkB,CAACsI,eAAD,CAA5B,EAA+C,CAAC9C,OAAD,CAA/C,CAFL;AAGA,YAAIyD,eAAe,GAAG9D,kBAAkB,EAAxC,CALK,CAKuC;;AAE5C,YAAI8B,WAAJ;;AAEA,YAAIuB,cAAJ,EAAoB;AAClB,cAAIU,cAAc,GAAG5I,YAAY,CAACyI,kBAAD,EAAqB;AACpDI,YAAAA,OAAO,EAAE,KAD2C;AAEpDjC,YAAAA,eAAe,EAAEqB;AAFmC,WAArB,EAG9BU,eAH8B,CAAjC;;AAKAhC,UAAAA,WAAW,GAAGiC,cAAc,CAACjC,WAA7B;AACD,SAPD,MAOO;AACL,cAAImC,cAAc,GAAG9I,YAAY,CAACyI,kBAAD,EAAqB,IAArB,EAA2BE,eAA3B,CAAjC;;AAEAhC,UAAAA,WAAW,GAAGmC,cAAc,CAACnC,WAA7B;AACD,SApBI,CAoBH;;;AAGF,YAAIoC,gBAAgB,GAAGlI,oBAAoB,CAAC8F,WAAD,EAAc9B,kBAAd,EAAkCd,mBAAlC,CAA3C;AACAuE,QAAAA,iBAAiB,GAAGxD,iBAAiB,CAACiE,gBAAD,CAArC;AACD;;AAED1B,MAAAA,aAAa,CAAC,GAAGF,MAAH,CAAUzH,kBAAkB,CAAC6I,iBAAD,CAA5B,EAAiD7I,kBAAkB,CAAC4I,iBAAD,CAAnE,CAAD,CAAb;AACD;AACF,GApDgC,CAAjC,CApJiE,CAwM7D;;AAEJ,MAAIU,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,CAA/B,EAAkCrD,IAAlC,EAAwC;AAClE,QAAIA,IAAI,CAACsD,IAAL,KAAc,OAAlB,EAA2B;AACzB7B,MAAAA,aAAa,CAAC,EAAD,CAAb;AACA;AACD,KAJiE,CAIhE;;;AAGF,QAAII,UAAU,GAAG7B,IAAI,CAACuD,MAAL,CAAY,CAAZ,EAAe1B,UAAhC;AACAK,IAAAA,gBAAgB,CAACL,UAAD,CAAhB;AACD,GATD,CA1MiE,CAmN9D;;;AAGH,MAAI2B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCrI,IAAAA,OAAO,CAAC,CAACsC,oBAAF,EAAwB,qFAAxB,CAAP;AACAtC,IAAAA,OAAO,CAAC8B,YAAY,KAAKwG,SAAlB,EAA6B,0DAA7B,CAAP;AACAtI,IAAAA,OAAO,CAACgC,cAAc,KAAKsG,SAApB,EAA+B,yEAA/B,CAAP;AACAtI,IAAAA,OAAO,CAACmC,cAAc,KAAKmG,SAApB,EAA+B,iEAA/B,CAAP;AACD;;AAED,MAAIC,UAAU,GAAGxG,IAAI,KAAKuG,SAAT,GAAqBvG,IAArB,GAA4BD,YAA7C;AACA,MAAI0G,uBAAuB,GAAGvG,iBAAiB,IAAID,cAAnD;AACA,MAAIyG,eAAe,GAAGrG,SAAS,IAAID,cAAnC;;AAEA,MAAIuG,+BAA+B,GAAG,SAASA,+BAAT,CAAyCC,WAAzC,EAAsD;AAC1FtG,IAAAA,uBAAuB,KAAK,IAA5B,IAAoCA,uBAAuB,KAAK,KAAK,CAArE,GAAyE,KAAK,CAA9E,GAAkFA,uBAAuB,CAACsG,WAAD,CAAzG;AACArG,IAAAA,oBAAoB,KAAK,IAAzB,IAAiCA,oBAAoB,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,oBAAoB,CAACqG,WAAD,CAAhG;AACD,GAHD,CAjOiE,CAoO9D;;;AAGH,MAAIC,eAAe,GAAG/J,KAAK,CAAC2E,OAAN,CAAc,YAAY;AAC9C,WAAO;AACL7B,MAAAA,OAAO,EAAEgC,aADJ;AAEL1C,MAAAA,UAAU,EAAEsC,gBAFP;AAGL2E,MAAAA,MAAM,EAAErC,aAHH;AAILgD,MAAAA,UAAU,EAAE/C,iBAJP;AAKL3E,MAAAA,cAAc,EAAEA,cALX;AAML2H,MAAAA,QAAQ,EAAEjC,gBANL;AAOLvF,MAAAA,SAAS,EAAEA,SAPN;AAQL2D,MAAAA,aAAa,EAAEA,aARV;AASLrD,MAAAA,iBAAiB,EAAEA,iBATd;AAULC,MAAAA,QAAQ,EAAEA,QAVL;AAWLH,MAAAA,aAAa,EAAEA,aAXV;AAYLc,MAAAA,UAAU,EAAEA,UAZP;AAaLC,MAAAA,WAAW,EAAEA,WAbR;AAcLP,MAAAA,uBAAuB,EAAEA;AAdpB,KAAP;AAgBD,GAjBqB,EAiBnB,CAACyB,aAAD,EAAgBJ,gBAAhB,EAAkCsC,aAAlC,EAAiDC,iBAAjD,EAAoE3E,cAApE,EAAoF0F,gBAApF,EAAsGvF,SAAtG,EAAiH2D,aAAjH,EAAgIrD,iBAAhI,EAAmJC,QAAnJ,EAA6JH,aAA7J,EAA4Kc,UAA5K,EAAwLC,WAAxL,EAAqMP,uBAArM,CAjBmB,CAAtB,CAvOiE,CAwPkK;AACnO;AACA;;AAEA,MAAI6G,YAAY,GAAG,CAAC,CAACxE,iBAAiB,GAAGU,aAAH,GAAmBtB,aAArC,EAAoDpD,MAAxE;AACA,MAAIyI,aAAa,GAAG;AACpBzE,EAAAA,iBAAiB,IAAIS,YAAY,CAACiE,eAAlC,IAAqD;AACrDF,EAAAA,YADA,GACe,EADf,GACoB;AAClBG,IAAAA,QAAQ,EAAE;AADQ,GAFpB;AAKA,SAAO,aAAarK,KAAK,CAACsK,aAAN,CAAoBhK,eAAe,CAACiK,QAApC,EAA8C;AAChEjJ,IAAAA,KAAK,EAAEyI;AADyD,GAA9C,EAEjB,aAAa/J,KAAK,CAACsK,aAAN,CAAoBlK,UAApB,EAAgCT,QAAQ,CAAC,EAAD,EAAKuE,SAAL,EAAgB;AACtE;AACAlC,IAAAA,GAAG,EAAEA,GAFiE;AAGtEC,IAAAA,EAAE,EAAEkC,QAHkE;AAItEhC,IAAAA,SAAS,EAAEA,SAJ2D;AAKtE4B,IAAAA,wBAAwB,EAAEA,wBAL4C;AAMtEoG,IAAAA,aAAa,EAAEA,aANuD,CAMzC;AANyC;AAQtE7C,IAAAA,aAAa,EAAEA,aARuD;AAStE4B,IAAAA,qBAAqB,EAAEA,qBAT+C;AAUtEsB,IAAAA,IAAI,EAAEpG,QAAQ,GAAG,UAAH,GAAgBqF,SAVwC,CAU9B;AAV8B;AAYtE/G,IAAAA,WAAW,EAAEgD,iBAZyD;AAatE/C,IAAAA,QAAQ,EAAEiD,gBAb4D;AActEhD,IAAAA,UAAU,EAAEsD,gBAd0D,CAczC;AAdyC;AAgBtE7F,IAAAA,UAAU,EAAEA,UAhB0D;AAiBtE6J,IAAAA,YAAY,EAAEA,YAjBwD,CAiB3C;AAjB2C;AAmBtEhH,IAAAA,IAAI,EAAEwG,UAnBgE;AAoBtEtG,IAAAA,iBAAiB,EAAEuG,uBApBmD;AAqBtEpG,IAAAA,SAAS,EAAEqG,eArB2D;AAsBtEpG,IAAAA,uBAAuB,EAAEqG,+BAtB6C,CAsBb;AAtBa;AAwBtEY,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;AAChD,aAAO5G,QAAP;AACD;AA1BqE,GAAhB,CAAxC,CAFI,CAApB;AA8BD,CAhS2B,CAA5B;;AAkSA,IAAIyF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC3H,EAAAA,QAAQ,CAAC6I,WAAT,GAAuB,UAAvB;AACD;;AAED7I,QAAQ,CAACnB,WAAT,GAAuBA,WAAvB;AACAmB,QAAQ,CAAClB,UAAT,GAAsBA,UAAtB;AACA,eAAekB,QAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"id\", \"prefixCls\", \"fieldNames\", \"defaultValue\", \"value\", \"changeOnSelect\", \"onChange\", \"displayRender\", \"checkable\", \"searchValue\", \"onSearch\", \"showSearch\", \"expandTrigger\", \"options\", \"dropdownPrefixCls\", \"loadData\", \"popupVisible\", \"open\", \"popupClassName\", \"dropdownClassName\", \"dropdownMenuColumnStyle\", \"popupPlacement\", \"placement\", \"onDropdownVisibleChange\", \"onPopupVisibleChange\", \"expandIcon\", \"loadingIcon\", \"children\", \"dropdownMatchSelectWidth\", \"showCheckedStrategy\"];\nimport * as React from 'react';\nimport useId from \"rc-select/es/hooks/useId\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { BaseSelect } from 'rc-select';\nimport OptionList from './OptionList';\nimport CascaderContext from './context';\nimport { fillFieldNames, toPathKey, toPathKeys, SHOW_PARENT, SHOW_CHILD } from './utils/commonUtil';\nimport useDisplayValues from './hooks/useDisplayValues';\nimport useRefFunc from './hooks/useRefFunc';\nimport useEntities from './hooks/useEntities';\nimport { formatStrategyValues, toPathOptions } from './utils/treeUtil';\nimport useSearchConfig from './hooks/useSearchConfig';\nimport useSearchOptions from './hooks/useSearchOptions';\nimport warning from \"rc-util/es/warning\";\nimport useMissingValues from './hooks/useMissingValues';\n\nfunction isMultipleValue(value) {\n  return Array.isArray(value) && Array.isArray(value[0]);\n}\n\nfunction toRawValues(value) {\n  if (!value) {\n    return [];\n  }\n\n  if (isMultipleValue(value)) {\n    return value;\n  }\n\n  return (value.length === 0 ? [] : [value]).map(function (val) {\n    return Array.isArray(val) ? val : [val];\n  });\n}\n\nvar Cascader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-cascader' : _props$prefixCls,\n      fieldNames = props.fieldNames,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      changeOnSelect = props.changeOnSelect,\n      onChange = props.onChange,\n      displayRender = props.displayRender,\n      checkable = props.checkable,\n      searchValue = props.searchValue,\n      onSearch = props.onSearch,\n      showSearch = props.showSearch,\n      expandTrigger = props.expandTrigger,\n      options = props.options,\n      dropdownPrefixCls = props.dropdownPrefixCls,\n      loadData = props.loadData,\n      popupVisible = props.popupVisible,\n      open = props.open,\n      popupClassName = props.popupClassName,\n      dropdownClassName = props.dropdownClassName,\n      dropdownMenuColumnStyle = props.dropdownMenuColumnStyle,\n      popupPlacement = props.popupPlacement,\n      placement = props.placement,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onPopupVisibleChange = props.onPopupVisibleChange,\n      _props$expandIcon = props.expandIcon,\n      expandIcon = _props$expandIcon === void 0 ? '>' : _props$expandIcon,\n      loadingIcon = props.loadingIcon,\n      children = props.children,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? false : _props$dropdownMatchS,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_PARENT : _props$showCheckedStr,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var multiple = !!checkable; // =========================== Values ===========================\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value,\n    postState: toRawValues\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      rawValues = _useMergedState2[0],\n      setRawValues = _useMergedState2[1]; // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]); // =========================== Option ===========================\n\n  var mergedOptions = React.useMemo(function () {\n    return options || [];\n  }, [options]); // Only used in multiple mode, this fn will not call in single mode\n\n  var getPathKeyEntities = useEntities(mergedOptions, mergedFieldNames);\n  /** Convert path key back to value format */\n\n  var getValueByKeyPath = React.useCallback(function (pathKeys) {\n    var keyPathEntities = getPathKeyEntities();\n    return pathKeys.map(function (pathKey) {\n      var nodes = keyPathEntities[pathKey].nodes;\n      return nodes.map(function (node) {\n        return node[mergedFieldNames.value];\n      });\n    });\n  }, [getPathKeyEntities, mergedFieldNames]); // =========================== Search ===========================\n\n  var _useMergedState3 = useMergedState('', {\n    value: searchValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedSearchValue = _useMergedState4[0],\n      setSearchValue = _useMergedState4[1];\n\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n\n    if (info.source !== 'blur' && onSearch) {\n      onSearch(searchText);\n    }\n  };\n\n  var _useSearchConfig = useSearchConfig(showSearch),\n      _useSearchConfig2 = _slicedToArray(_useSearchConfig, 2),\n      mergedShowSearch = _useSearchConfig2[0],\n      searchConfig = _useSearchConfig2[1];\n\n  var searchOptions = useSearchOptions(mergedSearchValue, mergedOptions, mergedFieldNames, dropdownPrefixCls || prefixCls, searchConfig, changeOnSelect); // =========================== Values ===========================\n\n  var getMissingValues = useMissingValues(mergedOptions, mergedFieldNames); // Fill `rawValues` with checked conduction values\n\n  var _React$useMemo = React.useMemo(function () {\n    var _getMissingValues = getMissingValues(rawValues),\n        _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\n        existValues = _getMissingValues2[0],\n        missingValues = _getMissingValues2[1];\n\n    if (!multiple || !rawValues.length) {\n      return [existValues, [], missingValues];\n    }\n\n    var keyPathValues = toPathKeys(existValues);\n    var keyPathEntities = getPathKeyEntities();\n\n    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys; // Convert key back to value cells\n\n\n    // Convert key back to value cells\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n      checkedValues = _React$useMemo2[0],\n      halfCheckedValues = _React$useMemo2[1],\n      missingCheckedValues = _React$useMemo2[2];\n\n  var deDuplicatedValues = React.useMemo(function () {\n    var checkedKeys = toPathKeys(checkedValues);\n    var deduplicateKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n    return [].concat(_toConsumableArray(missingCheckedValues), _toConsumableArray(getValueByKeyPath(deduplicateKeys)));\n  }, [checkedValues, getPathKeyEntities, getValueByKeyPath, missingCheckedValues, showCheckedStrategy]);\n  var displayValues = useDisplayValues(deDuplicatedValues, mergedOptions, mergedFieldNames, multiple, displayRender); // =========================== Change ===========================\n\n  var triggerChange = useRefFunc(function (nextValues) {\n    setRawValues(nextValues); // Save perf if no need trigger event\n\n    if (onChange) {\n      var nextRawValues = toRawValues(nextValues);\n      var valueOptions = nextRawValues.map(function (valueCells) {\n        return toPathOptions(valueCells, mergedOptions, mergedFieldNames).map(function (valueOpt) {\n          return valueOpt.option;\n        });\n      });\n      var triggerValues = multiple ? nextRawValues : nextRawValues[0];\n      var triggerOptions = multiple ? valueOptions : valueOptions[0];\n      onChange(triggerValues, triggerOptions);\n    }\n  }); // =========================== Select ===========================\n\n  var onInternalSelect = useRefFunc(function (valuePath) {\n    setSearchValue('');\n\n    if (!multiple) {\n      triggerChange(valuePath);\n    } else {\n      // Prepare conduct required info\n      var pathKey = toPathKey(valuePath);\n      var checkedPathKeys = toPathKeys(checkedValues);\n      var halfCheckedPathKeys = toPathKeys(halfCheckedValues);\n      var existInChecked = checkedPathKeys.includes(pathKey);\n      var existInMissing = missingCheckedValues.some(function (valueCells) {\n        return toPathKey(valueCells) === pathKey;\n      }); // Do update\n\n      var nextCheckedValues = checkedValues;\n      var nextMissingValues = missingCheckedValues;\n\n      if (existInMissing && !existInChecked) {\n        // Missing value only do filter\n        nextMissingValues = missingCheckedValues.filter(function (valueCells) {\n          return toPathKey(valueCells) !== pathKey;\n        });\n      } else {\n        // Update checked key first\n        var nextRawCheckedKeys = existInChecked ? checkedPathKeys.filter(function (key) {\n          return key !== pathKey;\n        }) : [].concat(_toConsumableArray(checkedPathKeys), [pathKey]);\n        var pathKeyEntities = getPathKeyEntities(); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (existInChecked) {\n          var _conductCheck2 = conductCheck(nextRawCheckedKeys, {\n            checked: false,\n            halfCheckedKeys: halfCheckedPathKeys\n          }, pathKeyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } else {\n          var _conductCheck3 = conductCheck(nextRawCheckedKeys, true, pathKeyEntities);\n\n          checkedKeys = _conductCheck3.checkedKeys;\n        } // Roll up to parent level keys\n\n\n        var deDuplicatedKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n        nextCheckedValues = getValueByKeyPath(deDuplicatedKeys);\n      }\n\n      triggerChange([].concat(_toConsumableArray(nextMissingValues), _toConsumableArray(nextCheckedValues)));\n    }\n  }); // Display Value change logic\n\n  var onDisplayValuesChange = function onDisplayValuesChange(_, info) {\n    if (info.type === 'clear') {\n      triggerChange([]);\n      return;\n    } // Cascader do not support `add` type. Only support `remove`\n\n\n    var valueCells = info.values[0].valueCells;\n    onInternalSelect(valueCells);\n  }; // ============================ Open ============================\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(!onPopupVisibleChange, '`onPopupVisibleChange` is deprecated. Please use `onDropdownVisibleChange` instead.');\n    warning(popupVisible === undefined, '`popupVisible` is deprecated. Please use `open` instead.');\n    warning(popupClassName === undefined, '`popupClassName` is deprecated. Please use `dropdownClassName` instead.');\n    warning(popupPlacement === undefined, '`popupPlacement` is deprecated. Please use `placement` instead.');\n  }\n\n  var mergedOpen = open !== undefined ? open : popupVisible;\n  var mergedDropdownClassName = dropdownClassName || popupClassName;\n  var mergedPlacement = placement || popupPlacement;\n\n  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(nextVisible) {\n    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextVisible);\n    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextVisible);\n  }; // ========================== Context ===========================\n\n\n  var cascaderContext = React.useMemo(function () {\n    return {\n      options: mergedOptions,\n      fieldNames: mergedFieldNames,\n      values: checkedValues,\n      halfValues: halfCheckedValues,\n      changeOnSelect: changeOnSelect,\n      onSelect: onInternalSelect,\n      checkable: checkable,\n      searchOptions: searchOptions,\n      dropdownPrefixCls: dropdownPrefixCls,\n      loadData: loadData,\n      expandTrigger: expandTrigger,\n      expandIcon: expandIcon,\n      loadingIcon: loadingIcon,\n      dropdownMenuColumnStyle: dropdownMenuColumnStyle\n    };\n  }, [mergedOptions, mergedFieldNames, checkedValues, halfCheckedValues, changeOnSelect, onInternalSelect, checkable, searchOptions, dropdownPrefixCls, loadData, expandTrigger, expandIcon, loadingIcon, dropdownMenuColumnStyle]); // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n\n  var emptyOptions = !(mergedSearchValue ? searchOptions : mergedOptions).length;\n  var dropdownStyle = // Search to match width\n  mergedSearchValue && searchConfig.matchInputWidth || // Empty keep the width\n  emptyOptions ? {} : {\n    minWidth: 'auto'\n  };\n  return /*#__PURE__*/React.createElement(CascaderContext.Provider, {\n    value: cascaderContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({}, restProps, {\n    // MISC\n    ref: ref,\n    id: mergedId,\n    prefixCls: prefixCls,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n    dropdownStyle: dropdownStyle // Value\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange,\n    mode: multiple ? 'multiple' : undefined // Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    showSearch: mergedShowSearch // Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: emptyOptions // Open\n    ,\n    open: mergedOpen,\n    dropdownClassName: mergedDropdownClassName,\n    placement: mergedPlacement,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange // Children\n    ,\n    getRawInputElement: function getRawInputElement() {\n      return children;\n    }\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Cascader.displayName = 'Cascader';\n}\n\nCascader.SHOW_PARENT = SHOW_PARENT;\nCascader.SHOW_CHILD = SHOW_CHILD;\nexport default Cascader;"]},"metadata":{},"sourceType":"module"}