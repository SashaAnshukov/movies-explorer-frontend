{"ast":null,"code":"/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString;\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var dec = opt.decode || decode;\n  var index = 0;\n\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index); // no more cookie pairs\n\n    if (eqIdx === -1) {\n      break;\n    }\n\n    var endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    var key = str.slice(index, eqIdx).trim(); // only assign once\n\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim(); // quoted values\n\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires;\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low';\n        break;\n\n      case 'medium':\n        str += '; Priority=Medium';\n        break;\n\n      case 'high':\n        str += '; Priority=High';\n        break;\n\n      default:\n        throw new TypeError('option priority is invalid');\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n\n      case 'none':\n        str += '; SameSite=None';\n        break;\n\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\n\nfunction decode(str) {\n  return str.indexOf('%') !== -1 ? decodeURIComponent(str) : str;\n}\n/**\n * URL-encode value.\n *\n * @param {string} str\n * @returns {string}\n */\n\n\nfunction encode(val) {\n  return encodeURIComponent(val);\n}\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\n\nfunction isDate(val) {\n  return __toString.call(val) === '[object Date]' || val instanceof Date;\n}\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}","map":{"version":3,"sources":["C:/dev/diploma/movies-explorer-frontend/node_modules/cookie/index.js"],"names":["exports","parse","serialize","__toString","Object","prototype","toString","fieldContentRegExp","str","options","TypeError","obj","opt","dec","decode","index","length","eqIdx","indexOf","endIdx","lastIndexOf","key","slice","trim","undefined","val","charCodeAt","tryDecode","name","enc","encode","test","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","decodeURIComponent","encodeURIComponent","call","Date","e"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEAA,OAAO,CAACC,KAAR,GAAgBA,KAAhB;AACAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,kBAAkB,GAAG,uCAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASN,KAAT,CAAeO,GAAf,EAAoBC,OAApB,EAA6B;AAC3B,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIE,SAAJ,CAAc,+BAAd,CAAN;AACD;;AAED,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAGH,OAAO,IAAI,EAArB;AACA,MAAII,GAAG,GAAGD,GAAG,CAACE,MAAJ,IAAcA,MAAxB;AAEA,MAAIC,KAAK,GAAG,CAAZ;;AACA,SAAOA,KAAK,GAAGP,GAAG,CAACQ,MAAnB,EAA2B;AACzB,QAAIC,KAAK,GAAGT,GAAG,CAACU,OAAJ,CAAY,GAAZ,EAAiBH,KAAjB,CAAZ,CADyB,CAGzB;;AACA,QAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACD;;AAED,QAAIE,MAAM,GAAGX,GAAG,CAACU,OAAJ,CAAY,GAAZ,EAAiBH,KAAjB,CAAb;;AAEA,QAAII,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACjBA,MAAAA,MAAM,GAAGX,GAAG,CAACQ,MAAb;AACD,KAFD,MAEO,IAAIG,MAAM,GAAGF,KAAb,EAAoB;AACzB;AACAF,MAAAA,KAAK,GAAGP,GAAG,CAACY,WAAJ,CAAgB,GAAhB,EAAqBH,KAAK,GAAG,CAA7B,IAAkC,CAA1C;AACA;AACD;;AAED,QAAII,GAAG,GAAGb,GAAG,CAACc,KAAJ,CAAUP,KAAV,EAAiBE,KAAjB,EAAwBM,IAAxB,EAAV,CAlByB,CAoBzB;;AACA,QAAIC,SAAS,KAAKb,GAAG,CAACU,GAAD,CAArB,EAA4B;AAC1B,UAAII,GAAG,GAAGjB,GAAG,CAACc,KAAJ,CAAUL,KAAK,GAAG,CAAlB,EAAqBE,MAArB,EAA6BI,IAA7B,EAAV,CAD0B,CAG1B;;AACA,UAAIE,GAAG,CAACC,UAAJ,CAAe,CAAf,MAAsB,IAA1B,EAAgC;AAC9BD,QAAAA,GAAG,GAAGA,GAAG,CAACH,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;AACD;;AAEDX,MAAAA,GAAG,CAACU,GAAD,CAAH,GAAWM,SAAS,CAACF,GAAD,EAAMZ,GAAN,CAApB;AACD;;AAEDE,IAAAA,KAAK,GAAGI,MAAM,GAAG,CAAjB;AACD;;AAED,SAAOR,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAST,SAAT,CAAmB0B,IAAnB,EAAyBH,GAAzB,EAA8BhB,OAA9B,EAAuC;AACrC,MAAIG,GAAG,GAAGH,OAAO,IAAI,EAArB;AACA,MAAIoB,GAAG,GAAGjB,GAAG,CAACkB,MAAJ,IAAcA,MAAxB;;AAEA,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAM,IAAInB,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,MAAI,CAACH,kBAAkB,CAACwB,IAAnB,CAAwBH,IAAxB,CAAL,EAAoC;AAClC,UAAM,IAAIlB,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,MAAIsB,KAAK,GAAGH,GAAG,CAACJ,GAAD,CAAf;;AAEA,MAAIO,KAAK,IAAI,CAACzB,kBAAkB,CAACwB,IAAnB,CAAwBC,KAAxB,CAAd,EAA8C;AAC5C,UAAM,IAAItB,SAAJ,CAAc,yBAAd,CAAN;AACD;;AAED,MAAIF,GAAG,GAAGoB,IAAI,GAAG,GAAP,GAAaI,KAAvB;;AAEA,MAAI,QAAQpB,GAAG,CAACqB,MAAhB,EAAwB;AACtB,QAAIA,MAAM,GAAGrB,GAAG,CAACqB,MAAJ,GAAa,CAA1B;;AAEA,QAAIC,KAAK,CAACD,MAAD,CAAL,IAAiB,CAACE,QAAQ,CAACF,MAAD,CAA9B,EAAwC;AACtC,YAAM,IAAIvB,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAEDF,IAAAA,GAAG,IAAI,eAAe4B,IAAI,CAACC,KAAL,CAAWJ,MAAX,CAAtB;AACD;;AAED,MAAIrB,GAAG,CAAC0B,MAAR,EAAgB;AACd,QAAI,CAAC/B,kBAAkB,CAACwB,IAAnB,CAAwBnB,GAAG,CAAC0B,MAA5B,CAAL,EAA0C;AACxC,YAAM,IAAI5B,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAEDF,IAAAA,GAAG,IAAI,cAAcI,GAAG,CAAC0B,MAAzB;AACD;;AAED,MAAI1B,GAAG,CAAC2B,IAAR,EAAc;AACZ,QAAI,CAAChC,kBAAkB,CAACwB,IAAnB,CAAwBnB,GAAG,CAAC2B,IAA5B,CAAL,EAAwC;AACtC,YAAM,IAAI7B,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAEDF,IAAAA,GAAG,IAAI,YAAYI,GAAG,CAAC2B,IAAvB;AACD;;AAED,MAAI3B,GAAG,CAAC4B,OAAR,EAAiB;AACf,QAAIA,OAAO,GAAG5B,GAAG,CAAC4B,OAAlB;;AAEA,QAAI,CAACC,MAAM,CAACD,OAAD,CAAP,IAAoBN,KAAK,CAACM,OAAO,CAACE,OAAR,EAAD,CAA7B,EAAkD;AAChD,YAAM,IAAIhC,SAAJ,CAAc,2BAAd,CAAN;AACD;;AAEDF,IAAAA,GAAG,IAAI,eAAegC,OAAO,CAACG,WAAR,EAAtB;AACD;;AAED,MAAI/B,GAAG,CAACgC,QAAR,EAAkB;AAChBpC,IAAAA,GAAG,IAAI,YAAP;AACD;;AAED,MAAII,GAAG,CAACiC,MAAR,EAAgB;AACdrC,IAAAA,GAAG,IAAI,UAAP;AACD;;AAED,MAAII,GAAG,CAACkC,QAAR,EAAkB;AAChB,QAAIA,QAAQ,GAAG,OAAOlC,GAAG,CAACkC,QAAX,KAAwB,QAAxB,GACXlC,GAAG,CAACkC,QAAJ,CAAaC,WAAb,EADW,GAEXnC,GAAG,CAACkC,QAFR;;AAIA,YAAQA,QAAR;AACE,WAAK,KAAL;AACEtC,QAAAA,GAAG,IAAI,gBAAP;AACA;;AACF,WAAK,QAAL;AACEA,QAAAA,GAAG,IAAI,mBAAP;AACA;;AACF,WAAK,MAAL;AACEA,QAAAA,GAAG,IAAI,iBAAP;AACA;;AACF;AACE,cAAM,IAAIE,SAAJ,CAAc,4BAAd,CAAN;AAXJ;AAaD;;AAED,MAAIE,GAAG,CAACoC,QAAR,EAAkB;AAChB,QAAIA,QAAQ,GAAG,OAAOpC,GAAG,CAACoC,QAAX,KAAwB,QAAxB,GACXpC,GAAG,CAACoC,QAAJ,CAAaD,WAAb,EADW,GACkBnC,GAAG,CAACoC,QADrC;;AAGA,YAAQA,QAAR;AACE,WAAK,IAAL;AACExC,QAAAA,GAAG,IAAI,mBAAP;AACA;;AACF,WAAK,KAAL;AACEA,QAAAA,GAAG,IAAI,gBAAP;AACA;;AACF,WAAK,QAAL;AACEA,QAAAA,GAAG,IAAI,mBAAP;AACA;;AACF,WAAK,MAAL;AACEA,QAAAA,GAAG,IAAI,iBAAP;AACA;;AACF;AACE,cAAM,IAAIE,SAAJ,CAAc,4BAAd,CAAN;AAdJ;AAgBD;;AAED,SAAOF,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASM,MAAT,CAAiBN,GAAjB,EAAsB;AACpB,SAAOA,GAAG,CAACU,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GACH+B,kBAAkB,CAACzC,GAAD,CADf,GAEHA,GAFJ;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASsB,MAAT,CAAiBL,GAAjB,EAAsB;AACpB,SAAOyB,kBAAkB,CAACzB,GAAD,CAAzB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASgB,MAAT,CAAiBhB,GAAjB,EAAsB;AACpB,SAAOtB,UAAU,CAACgD,IAAX,CAAgB1B,GAAhB,MAAyB,eAAzB,IACLA,GAAG,YAAY2B,IADjB;AAED;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASzB,SAAT,CAAmBnB,GAAnB,EAAwBM,MAAxB,EAAgC;AAC9B,MAAI;AACF,WAAOA,MAAM,CAACN,GAAD,CAAb;AACD,GAFD,CAEE,OAAO6C,CAAP,EAAU;AACV,WAAO7C,GAAP;AACD;AACF","sourcesContent":["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}