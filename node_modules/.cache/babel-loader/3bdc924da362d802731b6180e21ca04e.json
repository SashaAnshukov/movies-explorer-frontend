{"ast":null,"code":"/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = status; // status code to message map\n\nstatus.message = codes; // status message (lower-case) to code map\n\nstatus.code = createMessageToStatusCodeMap(codes); // array of status codes\n\nstatus.codes = createStatusCodeList(codes); // status codes for redirects\n\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}; // status codes for empty bodies\n\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}; // status codes for when you should retry the request\n\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n/**\n * Create a map of message to status code.\n * @private\n */\n\nfunction createMessageToStatusCodeMap(codes) {\n  var map = {};\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code); // populate map\n\n    map[message.toLowerCase()] = status;\n  });\n  return map;\n}\n/**\n * Create a list of all status codes.\n * @private\n */\n\n\nfunction createStatusCodeList(codes) {\n  return Object.keys(codes).map(function mapCode(code) {\n    return Number(code);\n  });\n}\n/**\n * Get the status code for given message.\n * @private\n */\n\n\nfunction getStatusCode(message) {\n  var msg = message.toLowerCase();\n\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"');\n  }\n\n  return status.code[msg];\n}\n/**\n * Get the status message for given code.\n * @private\n */\n\n\nfunction getStatusMessage(code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code);\n  }\n\n  return status.message[code];\n}\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code);\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  } // '403'\n\n\n  var n = parseInt(code, 10);\n\n  if (!isNaN(n)) {\n    return getStatusMessage(n);\n  }\n\n  return getStatusCode(code);\n}","map":{"version":3,"sources":["C:/dev/diploma/movies-explorer-frontend/node_modules/finalhandler/node_modules/statuses/index.js"],"names":["codes","require","module","exports","status","message","code","createMessageToStatusCodeMap","createStatusCodeList","redirect","empty","retry","map","Object","keys","forEach","forEachCode","Number","toLowerCase","mapCode","getStatusCode","msg","prototype","hasOwnProperty","call","Error","getStatusMessage","TypeError","n","parseInt","isNaN"],"mappings":"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","sourcesContent":["/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// status code to message map\nstatus.message = codes\n\n// status message (lower-case) to code map\nstatus.code = createMessageToStatusCodeMap(codes)\n\n// array of status codes\nstatus.codes = createStatusCodeList(codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Create a map of message to status code.\n * @private\n */\n\nfunction createMessageToStatusCodeMap (codes) {\n  var map = {}\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // populate map\n    map[message.toLowerCase()] = status\n  })\n\n  return map\n}\n\n/**\n * Create a list of all status codes.\n * @private\n */\n\nfunction createStatusCodeList (codes) {\n  return Object.keys(codes).map(function mapCode (code) {\n    return Number(code)\n  })\n}\n\n/**\n * Get the status code for given message.\n * @private\n */\n\nfunction getStatusCode (message) {\n  var msg = message.toLowerCase()\n\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"')\n  }\n\n  return status.code[msg]\n}\n\n/**\n * Get the status message for given code.\n * @private\n */\n\nfunction getStatusMessage (code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code)\n  }\n\n  return status.message[code]\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code)\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    return getStatusMessage(n)\n  }\n\n  return getStatusCode(code)\n}\n"]},"metadata":{},"sourceType":"script"}